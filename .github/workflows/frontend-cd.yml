name: CD - Deploy Frontend to S3/CloudFront

on:
  workflow_run:
    workflows: ["CI - Run Tests and Build Images"]
    types: [completed]
    branches: [main]
  workflow_dispatch:

jobs:
  gate:
    name: Evaluate conditions
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ] && [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  deploy-frontend:
    needs: gate
    if: ${{ needs.gate.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Build frontend (Vite)
        working-directory: frontend
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
        run: |
          echo "Using API: $VITE_API_BASE_URL"
          yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync to S3
        run: |
          aws s3 sync ./frontend/dist s3://${{ secrets.S3_BUCKET_FRONTEND }} --delete --cache-control max-age=31536000,public --exclude index.html
          aws s3 cp ./frontend/dist/index.html s3://${{ secrets.S3_BUCKET_FRONTEND }}/index.html --cache-control no-cache,private,max-age=0,must-revalidate --content-type text/html

      - name: Invalidate CloudFront
        if: ${{ env.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"


