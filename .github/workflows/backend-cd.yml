name: CD - Deploy Backend to Production

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/cd.yml'
      - '.github/workflows/backend-cd.yml'
  workflow_run:
    workflows: ["CI - Run Tests and Build Images"]
    types: [completed]
    branches: [main]

jobs:
  deploy:
    name: Build and Deploy to EC2 via SSM
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2 instances
        run: |
          instance_ids=("${{ secrets.EC2_INSTANCE_ID_1 }}" "${{ secrets.EC2_INSTANCE_ID_2 }}")
          
          for instance_id in "${instance_ids[@]}"; do
            if [ -n "$instance_id" ]; then
              echo "--- Deploying to instance: $instance_id ---"

              # 環境変数をBase64エンコード
              DOT_ENV_BASE64=$(echo "${{ secrets.DOT_ENV_PRODUCTION }}" | base64 -w 0)

              # SSMコマンドを直接実行（スクリプト分離なし）
              command_id=$(aws ssm send-command \
                --region ${{ secrets.AWS_REGION }} \
                --instance-ids "$instance_id" \
                --document-name "AWS-RunShellScript" \
                --parameters "commands=[
                  'set -euo pipefail',
                  'export HOME=/home/ec2-user',
                  'export PATH=/usr/local/bin:/usr/bin:/bin',
                  'cd /home/ec2-user/yubikirigennmann',
                  'git config --global --add safe.directory /home/ec2-user/yubikirigennmann',
                  'git config --global user.name \"EC2 Deploy\"',
                  'git config --global user.email \"deploy@ec2.local\"',
                  'git fetch origin main',
                  'git reset --hard origin/main',
                  'echo \"$DOT_ENV_BASE64\" | base64 -d > .env',
                  'cat > docker-compose.prod.yml << \"EOF\"',
                  'services:',
                  '  api:',
                  '    image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_API_REPOSITORY }}:latest',
                  '    ports:',
                  '      - \"3000:3000\"',
                  '    env_file:',
                  '      - .env',
                  'EOF',
                  'aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com',
                  'docker compose -f docker-compose.prod.yml pull api',
                  'docker compose -f docker-compose.prod.yml run --rm api bundle exec rails db:migrate',
                  'docker compose -f docker-compose.prod.yml up -d --force-recreate --remove-orphans api',
                  'true'
                ]" \
                --timeout-seconds 1800 \
                --query "Command.CommandId" \
                --output text)
              
              # Wait for completion
              aws ssm wait command-executed \
                --region ${{ secrets.AWS_REGION }} \
                --command-id "$command_id" \
                --instance-id "$instance_id" || ( \
                  echo "Command failed. Fetching details..." >&2 && \
                  aws ssm get-command-invocation --region ${{ secrets.AWS_REGION }} --command-id "$command_id" --instance-id "$instance_id" --query "StandardErrorContent" --output text >&2 && \
                  exit 1 \
                )
              
            fi
          done


