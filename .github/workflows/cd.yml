name: CD - Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy to EC2 via SSM
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Deploy to EC2 instances
        run: |
          instance_ids=("${{ secrets.EC2_INSTANCE_ID_1 }}" "${{ secrets.EC2_INSTANCE_ID_2 }}")
          
          for instance_id in "${instance_ids[@]}"; do
            if [ -n "$instance_id" ]; then
              echo "Deploying to instance: $instance_id"

              # Use simple approach: create .env file on EC2 directly
              aws ssm send-command \
                --region ${{ secrets.AWS_REGION }} \
                --instance-ids "$instance_id" \
                --document-name "AWS-RunShellScript" \
                --parameters 'commands=[
                  "set -euo pipefail",
                  "cd /home/ec2-user/yubikirigennmann",
                  "git pull origin main",
                  "cat > .env << '\''ENVEOF'\''",
                  "${{ secrets.DOT_ENV_PRODUCTION }}",
                  "ENVEOF",
                  "cat > docker-compose.prod.yml << '\''DOCKEREOF'\''",
                  "services:",
                  "  api:",
                  "    image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_API_REPOSITORY }}:latest",
                  "    ports:",
                  "      - \"3000:3000\"",
                  "    env_file:",
                  "      - .env",
                  "DOCKEREOF",
                  "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com",
                  "docker compose -f docker-compose.prod.yml pull api",
                  "docker compose -f docker-compose.prod.yml run --rm api bundle exec rails db:migrate",
                  "docker compose -f docker-compose.prod.yml up -d --remove-orphans api"
                ]' \
                --timeout-seconds 600 \
                --query "Command.CommandId" \
                --output text
            fi
          done