name: CD - Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy to EC2 via SSM
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push API image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.ECR_API_REPOSITORY }}:$IMAGE_TAG -f ./backend/Dockerfile ./backend
          docker push $ECR_REGISTRY/${{ secrets.ECR_API_REPOSITORY }}:$IMAGE_TAG
          docker tag $ECR_REGISTRY/${{ secrets.ECR_API_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ secrets.ECR_API_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ secrets.ECR_API_REPOSITORY }}:latest
          
      - name: Deploy to EC2 instances via SSM Run Command
        uses: Castlenine/aws-ssm-command@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          instance-ids: ${{ secrets.EC2_INSTANCE_ID_1 }},${{ secrets.EC2_INSTANCE_ID_2 }}
          command: |
            set -euo pipefail
            cd /home/ec2-user/yubikirigennmann
            git pull origin main
            
            echo "${{ secrets.DOT_ENV_PRODUCTION }}" > .env
            
            cat << EOF > docker-compose.prod.yml
            services:
              api:
                image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_API_REPOSITORY }}:latest
                ports:
                  - "3000:3000"
                env_file:
                  - .env
            EOF
            
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
            docker compose -f docker-compose.prod.yml pull api
            docker compose -f docker-compose.prod.yml run --rm api bundle exec rails db:migrate
            docker compose -f docker-compose.prod.yml up -d --remove-orphans api