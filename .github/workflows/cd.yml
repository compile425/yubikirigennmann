name: CD - Deploy to Production

on:
  workflow_run:
    workflows: ["CI - Run Tests and Build Images"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy to EC2 via SSM
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2 instances
        run: |
          instance_ids=("${{ secrets.EC2_INSTANCE_ID_1 }}" "${{ secrets.EC2_INSTANCE_ID_2 }}")
          
          for instance_id in "${instance_ids[@]}"; do
            if [ -n "$instance_id" ]; then
              echo "--- Deploying to instance: $instance_id ---"

              command_id=$(aws ssm send-command \
                --region ${{ secrets.AWS_REGION }} \
                --instance-ids "$instance_id" \
                --document-name "AWS-RunShellScript" \
                --parameters file://<(cat <<EOF
          {
              "commands": [
                  "set -euo pipefail",
                  "cd /home/ec2-user/yubikirigennmann",
                  "git pull origin main",
                  "echo \"${{ secrets.DOT_ENV_PRODUCTION }}\" > .env",
                  "cat << DOCKEREOF > docker-compose.prod.yml",
                  "services:",
                  "  api:",
                  "    image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_API_REPOSITORY }}:latest",
                  "    ports:",
                  "      - \\\"3000:3000\\\"",
                  "    env_file:",
                  "      - .env",
                  "DOCKEREOF",
                  "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazona