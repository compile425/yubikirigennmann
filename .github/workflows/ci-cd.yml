name: Rails CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run RSpec & Jest
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    services:
      db:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mysqladmin ping -h localhost"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker compose -f docker-compose.yml build api frontend

      - name: Setup database
        run: docker compose -f docker-compose.yml run --rm api bundle exec rails db:create db:migrate
        env:
          MYSQL_ROOT_PASSWORD: password
          DB_HOST: db
          RAILS_ENV: test

      - name: Run RSpec
        run: docker compose -f docker-compose.yml run --rm api bundle exec rspec
        env:
          MYSQL_ROOT_PASSWORD: password
          DB_HOST: db
          RAILS_ENV: test

  deploy:
    name: Deploy to Production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push API image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.ECR_API_REPOSITORY }}:$IMAGE_TAG -f ./backend/Dockerfile ./backend
          docker push $ECR_REGISTRY/${{ secrets.ECR_API_REPOSITORY }}:$IMAGE_TAG
          docker tag $ECR_REGISTRY/${{ secrets.ECR_API_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ secrets.ECR_API_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ secrets.ECR_API_REPOSITORY }}:latest


      - name: Build and push Nginx image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.ECR_NGINX_REPOSITORY }}:$IMAGE_TAG -f ./nginx/Dockerfile .
          docker push $ECR_REGISTRY/${{ secrets.ECR_NGINX_REPOSITORY }}:$IMAGE_TAG
          docker tag $ECR_REGISTRY/${{ secrets.ECR_NGINX_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ secrets.ECR_NGINX_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ secrets.ECR_NGINX_REPOSITORY }}:latest

      - name: Deploy to EC2 instances
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_1 }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            cd yubikirigennmann
            echo "${{ secrets.DOT_ENV_PRODUCTION }}" > .env
            
            docker compose -f docker-compose.prod.yml pull
            
            docker compose -f docker-compose.prod.yml run --rm api bundle exec rails db:migrate

            docker compose -f docker-compose.prod.yml up -d
      
      - name: Deploy to EC2 instance 2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_2 }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.ECR_SSH_PRIVATE_KEY }}
          script: |
            cd yubikirigennmann
            echo "${{ secrets.DOT_ENV_PRODUCTION }}" > .env
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d