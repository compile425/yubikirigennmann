name: CI - Run Tests and Build Images

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    name: Run RSpec & Jest Tests
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.backend || steps.changes.outputs.frontend }}

    services:
      db:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: myapp_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 -u root --password=password"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install system deps for gems
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            build-essential libmysqlclient-dev \
            google-chrome-stable curl default-mysql-client libjemalloc2 libvips

      - name: Bundle install (backend)
        working-directory: backend
        run: |
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Prepare test DB
        working-directory: backend
        env:
          RAILS_ENV: test
          DB_HOST: 127.0.0.1
          MYSQL_ROOT_PASSWORD: password
          DATABASE_URL: mysql2://root:password@127.0.0.1:3306/myapp_test
        run: |
          bin/rails db:create
          bin/rails db:migrate

      - name: Run tests
        working-directory: backend
        env:
          RAILS_ENV: test
          DB_HOST: 127.0.0.1
          MYSQL_ROOT_PASSWORD: password
          DATABASE_URL: mysql2://root:password@127.0.0.1:3306/myapp_test
        run: |
          if [ -x bin/rspec ]; then
            bin/rspec
          else
            bin/rails test
          fi

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      image-built: ${{ steps.build.outcome == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        id: build
        run: |
          cd backend
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_API_REPOSITORY }}:latest .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_API_REPOSITORY }}:latest