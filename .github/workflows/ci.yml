name: CI - Run Tests and Build Images

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && (
        contains(github.event.pull_request.changed_files, 'backend/') ||
        contains(github.event.pull_request.changed_files, 'frontend/') ||
        contains(github.event.pull_request.changed_files, '.github/workflows/') ||
        contains(github.event.pull_request.changed_files, 'docker-compose') ||
        contains(github.event.pull_request.changed_files, 'Dockerfile')
      ))

    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: myapp_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 -u root --password=password"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Cache system packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install system deps for gems
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            build-essential libmysqlclient-dev \
            google-chrome-stable curl default-mysql-client libjemalloc2 libvips

      - name: Bundle install (backend)
        working-directory: backend
        run: |
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Prepare test DB
        working-directory: backend
        env:
          RAILS_ENV: test
          DB_HOST: 127.0.0.1
          MYSQL_ROOT_PASSWORD: password
          DATABASE_URL: mysql2://root:password@127.0.0.1:3306/myapp_test
        run: |
          bin/rails db:create
          bin/rails db:migrate

      - name: Run tests
        working-directory: backend
        env:
          RAILS_ENV: test
          DB_HOST: 127.0.0.1
          MYSQL_ROOT_PASSWORD: password
          DATABASE_URL: mysql2://root:password@127.0.0.1:3306/myapp_test
        run: |
          if [ -x bin/rspec ]; then
            bin/rspec
          else
            bin/rails test
          fi

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ github.run_id }}
          path: ${{ github.workspace }}/tmp/screenshots
          retention-days: 3
          if-no-files-found: ignore

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && (
        contains(github.event.pull_request.changed_files, 'frontend/') ||
        contains(github.event.pull_request.changed_files, 'backend/') ||
        contains(github.event.pull_request.changed_files, '.github/workflows/') ||
        contains(github.event.pull_request.changed_files, 'docker-compose') ||
        contains(github.event.pull_request.changed_files, 'Dockerfile')
      ))

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Run linting
        working-directory: frontend
        run: yarn lint

      - name: Run tests
        working-directory: frontend
        run: |
          yarn test --coverage --watchAll=false --passWithNoTests

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' && (needs.test-backend.result == 'success' || needs.test-frontend.result == 'success')
    permissions:
      id-token: write
      contents: read
    outputs:
      image-built: ${{ steps.build.outcome == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_API_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max